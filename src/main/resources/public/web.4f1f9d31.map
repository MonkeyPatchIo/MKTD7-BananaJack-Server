{"version":3,"sources":["models/state.ts","../../../node_modules/lit-html/lib/directive.js","../../../node_modules/lit-html/lib/dom.js","../../../node_modules/lit-html/lib/part.js","../../../node_modules/lit-html/lib/template.js","../../../node_modules/lit-html/lib/template-instance.js","../../../node_modules/lit-html/lib/template-result.js","../../../node_modules/lit-html/lib/parts.js","../../../node_modules/lit-html/lib/default-template-processor.js","../../../node_modules/lit-html/lib/template-factory.js","../../../node_modules/lit-html/lib/render.js","../../../node_modules/lit-html/lit-html.js","../../../node_modules/lit-html/directives/when.js","services/BackendApi.ts","templates/login.ts","../../../node_modules/lit-html/directives/repeat.js","templates/rooms.ts","models/models.ts","templates/current.ts","templates/app.ts","index.ts"],"names":["directives","WeakMap","directive","f","set","isDirective","o","has","isCEPolyfill","window","undefined","customElements","polyfillWrapFlushCallback","reparentNodes","container","start","end","before","node","n","nextSibling","insertBefore","removeNodes","startNode","endNode","removeChild","noChange","marker","String","Math","random","slice","nodeMarker","markerRegex","RegExp","rewritesStyleAttribute","el","document","createElement","setAttribute","getAttribute","Template","result","element","parts","index","partIndex","nodesToRemove","_prepareTemplate","template","content","walker","createTreeWalker","previousNode","currentNode","nextNode","nodeType","hasAttributes","attributes","count","i","length","value","indexOf","stringForPart","strings","name","lastAttributeNameRegex","exec","attributeLookupName","test","toLowerCase","split","push","type","removeAttribute","tagName","nodeValue","parent","parentNode","lastIndex","createMarker","createTextNode","previousSibling","Node","TEXT_NODE","isTemplatePartActive","part","createComment","TemplateInstance","processor","getTemplate","_parts","_getTemplate","values","setValue","commit","fragment","cloneNode","importNode","nodeIndex","_prepareInstance","handleTextExpression","insertAfterNode","handleAttributeExpressions","nodeName","adoptNode","upgrade","TemplateResult","l","html","isTextBinding","s","close","lastIndexOf","replace","match","p1","p2","p3","innerHTML","getHTML","SVGTemplateResult","getTemplateElement","svgElement","firstChild","isPrimitive","AttributeCommitter","dirty","_createPart","AttributePart","text","v","Array","isArray","Symbol","iterator","t","_getValue","comitter","committer","NodePart","templateFactory","_pendingValue","appendChild","ref","_insert","_commitText","_commitTemplateResult","_commitNode","_commitIterable","then","_commitPromise","clear","textContent","update","instance","_clone","itemParts","itemPart","item","appendIntoPart","insertAfterPart","BooleanAttributePart","Error","PropertyCommitter","single","PropertyPart","EventPart","eventName","removeEventListener","addEventListener","event","call","handleEvent","DefaultTemplateProcessor","prefix","defaultTemplateProcessor","templateCache","templateCaches","get","Map","render","defaultTemplateFactory","appendInto","svg","partCaches","when","condition","trueValue","falseValue","parentPart","cache","createDocumentFragment","truePart","falsePart","nextPart","nextValue","prevCondition","prevPart","cacheContainer","repeat","keyMapCache","cleanMap","key","map","delete","items","keyFnOrTemplate","keyFn","arguments","keyMap","currentMarker","e","error","forEach"],"mappings":"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","file":"web.4f1f9d31.map","sourceRoot":"../../web","sourcesContent":["import {Player, Room, RoomEvent} from './models';\n\nexport interface AppState {\n    error: string | null;\n    me: Player | null,\n    rooms: Room[];\n    current: Room | null;\n    lastEvent: RoomEvent | null;\n}\n\nexport const initialState: AppState = {\n    error: null,\n    me: null,\n    rooms: [],\n    current: null,\n    lastEvent: null\n};","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\nexport const directive = (f) => {\n    directives.set(f, true);\n    return f;\n};\nexport const isDirective = (o) => typeof o === 'function' && directives.has(o);\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    window.customElements.polyfillWrapFlushCallback !== undefined;\n/**\n * Reparents nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), into another container (could be the same container), before\n * `beforeNode`. If `beforeNode` is null, it appends the nodes to the\n * container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    let node = start;\n    while (node !== end) {\n        const n = node.nextSibling;\n        container.insertBefore(node, before);\n        node = n;\n    }\n};\n/**\n * Removes nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), from `container`.\n */\nexport const removeNodes = (container, startNode, endNode = null) => {\n    let node = startNode;\n    while (node !== endNode) {\n        const n = node.nextSibling;\n        container.removeChild(node);\n        node = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, not attribute positions,\n * in template.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\nexport const rewritesStyleAttribute = (() => {\n    const el = document.createElement('div');\n    el.setAttribute('style', '{{bad value}}');\n    return el.getAttribute('style') !== '{{bad value}}';\n})();\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        let index = -1;\n        let partIndex = 0;\n        const nodesToRemove = [];\n        const _prepareTemplate = (template) => {\n            const content = template.content;\n            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n            // null\n            const walker = document.createTreeWalker(content, 133 /* NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT |\n                   NodeFilter.SHOW_TEXT */, null, false);\n            // The actual previous node, accounting for removals: if a node is removed\n            // it will never be the previousNode.\n            let previousNode;\n            // Used to set previousNode at the top of the loop.\n            let currentNode;\n            while (walker.nextNode()) {\n                index++;\n                previousNode = currentNode;\n                const node = currentNode = walker.currentNode;\n                if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                    if (node.hasAttributes()) {\n                        const attributes = node.attributes;\n                        // Per\n                        // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                        // attributes are not guaranteed to be returned in document order.\n                        // In particular, Edge/IE can return them out of order, so we cannot\n                        // assume a correspondance between part index and attribute index.\n                        let count = 0;\n                        for (let i = 0; i < attributes.length; i++) {\n                            if (attributes[i].value.indexOf(marker) >= 0) {\n                                count++;\n                            }\n                        }\n                        while (count-- > 0) {\n                            // Get the template literal section leading up to the first\n                            // expression in this attribute\n                            const stringForPart = result.strings[partIndex];\n                            // Find the attribute name\n                            const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                            // Find the corresponding attribute\n                            // If the attribute name contains special characters, lower-case\n                            // it so that on XML nodes with case-sensitive getAttribute() we\n                            // can still find the attribute, which will have been lower-cased\n                            // by the parser.\n                            //\n                            // If the attribute name doesn't contain special character, it's\n                            // important to _not_ lower-case it, in case the name is\n                            // case-sensitive, like with XML attributes like \"viewBox\".\n                            const attributeLookupName = (rewritesStyleAttribute && name === 'style') ?\n                                'style$' :\n                                /^[a-zA-Z-]*$/.test(name) ? name : name.toLowerCase();\n                            const attributeValue = node.getAttribute(attributeLookupName);\n                            const strings = attributeValue.split(markerRegex);\n                            this.parts.push({ type: 'attribute', index, name, strings });\n                            node.removeAttribute(attributeLookupName);\n                            partIndex += strings.length - 1;\n                        }\n                    }\n                    if (node.tagName === 'TEMPLATE') {\n                        _prepareTemplate(node);\n                    }\n                }\n                else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                    const nodeValue = node.nodeValue;\n                    if (nodeValue.indexOf(marker) < 0) {\n                        continue;\n                    }\n                    const parent = node.parentNode;\n                    const strings = nodeValue.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        parent.insertBefore((strings[i] === '') ? createMarker() :\n                            document.createTextNode(strings[i]), node);\n                        this.parts.push({ type: 'node', index: index++ });\n                    }\n                    parent.insertBefore(strings[lastIndex] === '' ?\n                        createMarker() :\n                        document.createTextNode(strings[lastIndex]), node);\n                    nodesToRemove.push(node);\n                }\n                else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                    if (node.nodeValue === marker) {\n                        const parent = node.parentNode;\n                        // Add a new marker node to be the startNode of the Part if any of\n                        // the following are true:\n                        //  * We don't have a previousSibling\n                        //  * previousSibling is being removed (thus it's not the\n                        //    `previousNode`)\n                        //  * previousSibling is not a Text node\n                        //\n                        // TODO(justinfagnani): We should be able to use the previousNode\n                        // here as the marker node and reduce the number of extra nodes we\n                        // add to a template. See\n                        // https://github.com/PolymerLabs/lit-html/issues/147\n                        const previousSibling = node.previousSibling;\n                        if (previousSibling === null || previousSibling !== previousNode ||\n                            previousSibling.nodeType !== Node.TEXT_NODE) {\n                            parent.insertBefore(createMarker(), node);\n                        }\n                        else {\n                            index--;\n                        }\n                        this.parts.push({ type: 'node', index: index++ });\n                        nodesToRemove.push(node);\n                        // If we don't have a nextSibling add a marker node.\n                        // We don't have to check if the next node is going to be removed,\n                        // because that node will induce a new marker if so.\n                        if (node.nextSibling === null) {\n                            parent.insertBefore(createMarker(), node);\n                        }\n                        else {\n                            index--;\n                        }\n                        currentNode = previousNode;\n                        partIndex++;\n                    }\n                    else {\n                        let i = -1;\n                        while ((i = node.nodeValue.indexOf(marker, i + 1)) !== -1) {\n                            // Comment node has a binding marker inside, make an inactive part\n                            // The binding won't work, but subsequent bindings will\n                            // TODO (justinfagnani): consider whether it's even worth it to\n                            // make bindings in comments work\n                            this.parts.push({ type: 'node', index: -1 });\n                        }\n                    }\n                }\n            }\n        };\n        _prepareTemplate(element);\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#attributes-0\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-character\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \\x09\\x0a\\x0c\\x0d\"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, getTemplate) {\n        this._parts = [];\n        this.template = template;\n        this.processor = processor;\n        this._getTemplate = getTemplate;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this._parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this._parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // When using the Custom Elements polyfill, clone the node, rather than\n        // importing it, to keep the fragment in the template's document. This\n        // leaves the fragment inert so custom elements won't upgrade and\n        // potentially modify their contents by creating a polyfilled ShadowRoot\n        // while we traverse the tree.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const parts = this.template.parts;\n        let partIndex = 0;\n        let nodeIndex = 0;\n        const _prepareInstance = (fragment) => {\n            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n            // null\n            const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n            let node = walker.nextNode();\n            // Loop through all the nodes and parts of a template\n            while (partIndex < parts.length && node !== null) {\n                const part = parts[partIndex];\n                // Consecutive Parts may have the same node index, in the case of\n                // multiple bound attributes on an element. So each iteration we either\n                // increment the nodeIndex, if we aren't on a node with a part, or the\n                // partIndex if we are. By not incrementing the nodeIndex when we find a\n                // part, we allow for the next part to be associated with the current\n                // node if neccessasry.\n                if (!isTemplatePartActive(part)) {\n                    this._parts.push(undefined);\n                    partIndex++;\n                }\n                else if (nodeIndex === part.index) {\n                    if (part.type === 'node') {\n                        const part = this.processor.handleTextExpression(this._getTemplate);\n                        part.insertAfterNode(node);\n                        this._parts.push(part);\n                    }\n                    else {\n                        this._parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings));\n                    }\n                    partIndex++;\n                }\n                else {\n                    nodeIndex++;\n                    if (node.nodeName === 'TEMPLATE') {\n                        _prepareInstance(node.content);\n                    }\n                    node = walker.nextNode();\n                }\n            }\n        };\n        _prepareInstance(fragment);\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { reparentNodes } from './dom.js';\nimport { lastAttributeNameRegex, marker, nodeMarker, rewritesStyleAttribute } from './template.js';\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a <template> element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isTextBinding = true;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            html += s;\n            const close = s.lastIndexOf('>');\n            // We're in a text position if the previous string closed its last tag, an\n            // attribute position if the string opened an unclosed tag, and unchanged\n            // if the string had no brackets at all:\n            //\n            // \"...>...\": text position. open === -1, close > -1\n            // \"...<...\": attribute position. open > -1\n            // \"...\": no change. open === -1, close === -1\n            isTextBinding =\n                (close > -1 || isTextBinding) && s.indexOf('<', close + 1) === -1;\n            if (!isTextBinding && rewritesStyleAttribute) {\n                html = html.replace(lastAttributeNameRegex, (match, p1, p2, p3) => {\n                    return (p2 === 'style') ? `${p1}style$${p3}` : match;\n                });\n            }\n            html += isTextBinding ? nodeMarker : marker;\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTMl in an <svg> tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the <svg> tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => (value === null ||\n    !(typeof value === 'object' || typeof value === 'function'));\n/**\n * Sets attribute values for AttributeParts, so that the value is only set once\n * even if there are multiple parts for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (v != null &&\n                    (Array.isArray(v) || typeof v !== 'string' && v[Symbol.iterator])) {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n                else {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\nexport class AttributePart {\n    constructor(comitter) {\n        this.value = undefined;\n        this.committer = comitter;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\nexport class NodePart {\n    constructor(templateFactory) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        this.templateFactory = templateFactory;\n    }\n    /**\n     * Inserts this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part between `ref` and `ref`'s next sibling. Both `ref` and\n     * its next sibling must be static, unchanging nodes such as those that appear\n     * in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part._insert(this.startNode = createMarker());\n        part._insert(this.endNode = createMarker());\n    }\n    /**\n     * Appends this part after `ref`\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref._insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        const value = this._pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this._commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this._commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this._commitNode(value);\n        }\n        else if (Array.isArray(value) || value[Symbol.iterator]) {\n            this._commitIterable(value);\n        }\n        else if (value.then !== undefined) {\n            this._commitPromise(value);\n        }\n        else {\n            // Fallback, will render the string representation\n            this._commitText(value);\n        }\n    }\n    _insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    _commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this._insert(value);\n        this.value = value;\n    }\n    _commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === Node.TEXT_NODE) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.textContent = value;\n        }\n        else {\n            this._commitNode(document.createTextNode(typeof value === 'string' ? value : String(value)));\n        }\n        this.value = value;\n    }\n    _commitTemplateResult(value) {\n        const template = this.templateFactory(value);\n        if (this.value && this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use it's syntax extension, etc. The template factory comes\n            // from the render function so that it can control caching.\n            const instance = new TemplateInstance(template, value.processor, this.templateFactory);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this._commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    _commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.templateFactory);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    _commitPromise(value) {\n        this.value = value;\n        value.then((v) => {\n            if (this.value === value) {\n                this.setValue(v);\n                this.commit();\n            }\n        });\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        if (this._pendingValue === noChange) {\n            return;\n        }\n        const value = !!this._pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n        }\n        this.value = value;\n        this._pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\nexport class EventPart {\n    constructor(element, eventName) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        if (this._pendingValue === noChange) {\n            return;\n        }\n        if ((this._pendingValue == null) !== (this.value == null)) {\n            if (this._pendingValue == null) {\n                this.element.removeEventListener(this.eventName, this);\n            }\n            else {\n                this.element.addEventListener(this.eventName, this);\n            }\n        }\n        this.value = this._pendingValue;\n        this._pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.element, event);\n        }\n        else if (typeof this.value.handleEvent === 'function') {\n            this.value.handleEvent(event);\n        }\n    }\n}\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const comitter = new PropertyCommitter(element, name.slice(1), strings);\n            return comitter.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1))];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const comitter = new AttributeCommitter(element, name, strings);\n        return comitter.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(templateFactory) {\n        return new NodePart(templateFactory);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = new Map();\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.get(result.strings);\n    if (template === undefined) {\n        template = new Template(result, result.getTemplateElement());\n        templateCache.set(result.strings, template);\n    }\n    return template;\n}\n// The first argument to JS template tags retain identity across multiple\n// calls to a tag for the same literal, so we can cache work done per literal\n// in a Map.\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory as defaultTemplateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result a TemplateResult created by evaluating a template tag like\n *     `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param templateFactory a function to create a Template or retreive one from\n *     cache.\n */\nexport function render(result, container, templateFactory = defaultTemplateFactory) {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(templateFactory));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n}\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport * from './lib/template-result.js';\nexport * from './lib/template.js';\nexport * from './lib/default-template-processor.js';\nexport * from './lib/template-instance.js';\nexport * from './lib/part.js';\nexport * from './lib/parts.js';\nexport * from './lib/dom.js';\nexport * from './lib/directive.js';\nexport * from './lib/render.js';\nexport * from './lib/template-factory.js';\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { directive, NodePart, reparentNodes } from '../lit-html.js';\nconst partCaches = new WeakMap();\n/**\n * Efficiently switches between two templates based on the given condition. The\n * rendered content is cached, and re-used when switching conditions. Templates\n * are evaluated lazily, so the passed values must be functions.\n *\n * While this directive can render any regular part, it makes the most sense\n * when used with TemplateResult since most other values are dirty checked\n * already.\n *\n * Example:\n *\n * let checked = false;\n *\n * html`\n *   when(checked, () => html`Checkmark is checked`, () => html`Checkmark is not\n * checked`);\n * `\n *\n * @param condition the condition to test truthiness against\n * @param trueValue the value to render given a true condition\n * @param falseValue the value to render given a false condition\n */\nexport const when = (condition, trueValue, falseValue) => directive((parentPart) => {\n    let cache = partCaches.get(parentPart);\n    // Create a new cache if this is the first render\n    if (cache === undefined) {\n        // Cache consists of two parts, one for each condition, and a\n        // docment fragment which we cache the nodes of the condition that's\n        // not currently rendered.\n        cache = {\n            truePart: new NodePart(parentPart.templateFactory),\n            falsePart: new NodePart(parentPart.templateFactory),\n            cacheContainer: document.createDocumentFragment(),\n        };\n        partCaches.set(parentPart, cache);\n        cache.truePart.appendIntoPart(parentPart);\n        cache.falsePart.appendIntoPart(parentPart);\n    }\n    // Based on the condition, select which part to render and which value\n    // to set on that part.\n    const nextPart = condition ? cache.truePart : cache.falsePart;\n    const nextValue = condition ? trueValue() : falseValue();\n    // If we switched condition, swap nodes to/from the cache.\n    if (!!condition !== cache.prevCondition) {\n        // Get the part which was rendered for the opposite condition. This\n        // should be added to the cache.\n        const prevPart = condition ? cache.falsePart : cache.truePart;\n        // If the next part was rendered, take it from the cache\n        if (nextPart.value) {\n            parentPart.startNode.parentNode.appendChild(cache.cacheContainer);\n        }\n        // If the prev part was rendered, move it to the cache\n        if (prevPart.value) {\n            reparentNodes(cache.cacheContainer, prevPart.startNode, prevPart.endNode.nextSibling);\n        }\n    }\n    // Set the next part's value\n    nextPart.setValue(nextValue);\n    nextPart.commit();\n    cache.prevCondition = !!condition;\n});\n//# sourceMappingURL=when.js.map","import {Action, Player, Room, RoomEvent, RoomEventListener} from '../models/models';\nimport {AppState} from '../models/state';\n\n\nexport class BackendApi {\n\n    // private roomWs: { [index: number]: WebSocket } = {};\n    private _state: AppState;\n    get state(): AppState {\n        return this._state;\n    }\n\n    set state(newState: AppState) {\n        this._state = newState;\n    }\n\n\n    constructor(readonly url: string,\n                readonly listener: RoomEventListener) {\n    }\n\n    // TODO WS\n    private handle<T>(res: Response): Promise<T> {\n        if (res.ok) {\n            return res.json();\n        } else {\n            return res.text()\n                .then(msg => Promise.reject(msg));\n        }\n    }\n\n    private getJson<T>(uri: string): Promise<T> {\n        return fetch(this.url + uri)\n            .then(res => this.handle<T>(res));\n    };\n\n    private postJson<T>(uri: string, json: any): Promise<T> {\n        const request: RequestInit = {\n            method: 'POST',\n            body: JSON.stringify(json)\n        };\n        return fetch(this.url + uri, request)\n            .then(res => this.handle<T>(res));\n    };\n\n    private registerWS(roomId: number, playerId: string) {\n        const wsUrl = this.url.replace('http://', 'ws://');\n        const ws = new WebSocket(wsUrl + `/ws/${roomId}`);\n        // this.roomWs[roomId] = ws;\n\n        // Register events\n        ws.onopen = (event: Event) => {\n            console.log('WS open', event);\n            // Register to room\n            ws.send(JSON.stringify({playerId}));\n        };\n        ws.onmessage = (event: MessageEvent) => {\n            console.log('WS message', event);\n            const roomEvent = JSON.parse(event.data) as RoomEvent;\n            this.listener(roomEvent, this.state);\n        };\n        ws.onclose = (event: CloseEvent) => {\n            console.log('WS close', event);\n            // this.roomWs[roomId] = null;\n        };\n        ws.onerror = (event: Event) => {\n            console.error('WS error', event);\n        };\n    }\n\n    // Auth\n    login(name: string): Promise<Player> {\n        return this.postJson('/api/auth/login', {name});\n    }\n\n    logout(playerId: string): Promise<Player> {\n        return this.postJson('/api/auth/logout', {playerId});\n    }\n\n    // Room\n    getRooms(): Promise<Room[]> {\n        return this.getJson('/api/room');\n    }\n\n    join(roomId: number, playerId: string): Promise<Room> {\n        return this.postJson<Room>('/api/room/join', {roomId, playerId})\n            .then(room => {\n                this.registerWS(roomId, playerId);\n                return room;\n            });\n    }\n\n    leave(roomId: number, playerId: string): Promise<Room> {\n        return this.postJson('/api/room/leave', {roomId, playerId})\n    }\n\n    action(roomId: number, playerId: string, action: Action): Promise<Room> {\n        return this.postJson('/api/room/move', {roomId, playerId, action})\n    }\n\n}","import {html} from 'lit-html';\nimport {when} from 'lit-html/directives/when';\n\nimport {AppState, initialState} from '../models/state';\nimport {api, updateState} from './app';\n\nconst onLogin = (state: AppState) => (event: Event) => {\n    event.preventDefault();\n    const name = (event.target['name'] as HTMLInputElement).value;\n    Promise.all([api.login(name), api.getRooms()])\n        .then(([me, rooms]) => updateState({...state, me, rooms, error: null}))\n        .catch(err => updateState({...state, error: err}));\n    return false;\n};\n\nconst onLogout = (state: AppState) => () =>\n    api.logout(state.me.id)\n        .then(() => updateState(initialState))\n        .catch(err => updateState({...state, error: err}));\n\nconst loggedTemplate = (state: AppState) => () =>\n    html`\n    <div class=\"me\">\n        <span class=\"name\">${state.me.name}</span>, \n        <span class=\"score\">${state.me.score}</span>\n        <button type=\"button\" @click=${onLogout(state)}>Logout</button>\n    </div>`;\n\nconst loginFormTempalte = (state: AppState) => () =>\n    html`\n      <form name=\"login\" @submit='${onLogin(state)}'>\n        <label> Login <input name='name' value='' required></label>\n        <button>Login</button>\n      </form>`;\n\nexport const loginTemplate = (state: AppState) =>\n    html`${when(state.me, loggedTemplate(state), loginFormTempalte(state))}`;\n\n\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { createMarker, directive, NodePart, removeNodes, reparentNodes } from '../lit-html.js';\nconst keyMapCache = new WeakMap();\nfunction cleanMap(part, key, map) {\n    if (!part.startNode.parentNode) {\n        map.delete(key);\n    }\n}\nexport function repeat(items, keyFnOrTemplate, template) {\n    let keyFn;\n    if (arguments.length === 2) {\n        template = keyFnOrTemplate;\n    }\n    else if (arguments.length === 3) {\n        keyFn = keyFnOrTemplate;\n    }\n    return directive((part) => {\n        let keyMap = keyMapCache.get(part);\n        if (keyMap === undefined) {\n            keyMap = new Map();\n            keyMapCache.set(part, keyMap);\n        }\n        const container = part.startNode.parentNode;\n        let index = -1;\n        let currentMarker = part.startNode.nextSibling;\n        for (const item of items) {\n            let result;\n            let key;\n            try {\n                ++index;\n                result = template(item, index);\n                key = keyFn ? keyFn(item) : index;\n            }\n            catch (e) {\n                console.error(e);\n                continue;\n            }\n            // Try to reuse a part\n            let itemPart = keyMap.get(key);\n            if (itemPart === undefined) {\n                // TODO(justinfagnani): We really want to avoid manual marker creation\n                // here and instead use something like part.insertBeforePart(). This\n                // requires a little refactoring, like iterating through values and\n                // existing parts like NodePart#_setIterable does. We can also remove\n                // keyMapCache and use part._value instead.\n                // But... repeat() is badly in need of rewriting, so we'll do this for\n                // now and revisit soon.\n                const marker = createMarker();\n                const endNode = createMarker();\n                container.insertBefore(marker, currentMarker);\n                container.insertBefore(endNode, currentMarker);\n                itemPart = new NodePart(part.templateFactory);\n                itemPart.insertAfterNode(marker);\n                if (key !== undefined) {\n                    keyMap.set(key, itemPart);\n                }\n            }\n            else if (currentMarker !== itemPart.startNode) {\n                // Existing part in the wrong position\n                const end = itemPart.endNode.nextSibling;\n                if (currentMarker !== end) {\n                    reparentNodes(container, itemPart.startNode, end, currentMarker);\n                }\n            }\n            else {\n                // else part is in the correct position already\n                currentMarker = itemPart.endNode.nextSibling;\n            }\n            itemPart.setValue(result);\n            itemPart.commit();\n        }\n        // Cleanup\n        if (currentMarker !== part.endNode) {\n            removeNodes(container, currentMarker, part.endNode);\n            keyMap.forEach(cleanMap);\n        }\n    });\n}\n//# sourceMappingURL=repeat.js.map","import {html} from 'lit-html';\nimport {when} from 'lit-html/directives/when';\nimport {repeat} from 'lit-html/directives/repeat';\n\nimport {AppState} from '../models/state';\nimport {Room} from '../models/models';\nimport {api, updateState} from './app';\n\nconst onJoin = (room: Room, state: AppState) => () =>\n    api.join(room.id, state.me.id)\n        .then(current => updateState({...state, current}))\n        .catch(err => updateState({...state, error: err}));\n\nconst roomTpl = (room: Room, state: AppState) => html`\n<div class=\"room\">\n  <div class=\"name\">\n    <h2>${room.name}</h2>\n    <div class=\"players\">${room.players.map(it => it.player.name).join(', ')}</div>\n  </div>\n  <div class=\"status ${room.full ? 'full' : ''}\">${room.players.length} / 4</div>\n  <div class=\"action\">\n    ${when(room.full,\n    () => html`Full`,\n    () => html`<button type=\"button\" class=\"join\" @click=${onJoin(room, state)}>Join</button>`\n)}\n  </div>\n</div>`;\n\nexport const roomsTemplate = (state: AppState) => html`<ul class=\"rooms\">\n  ${repeat(state.rooms, room => room.name, room => html`<li>${roomTpl(room, state)}</li>`)}\n</ul>`;\n","import {AppState} from './state';\n\nexport interface Hand {\n    cards: Card[];\n    score: number;\n}\n\nexport interface Card {\n    code: string;\n    image: string;\n}\n\nexport interface Room {\n    id: number;\n    name: string;\n    players: PlayerWithStatus[];\n    bank: Hand;\n    full: boolean;\n}\n\nexport interface Player {\n    id: string;\n    name: string;\n    score: number;\n}\n\nexport interface PlayerWithStatus {\n    player: Player;\n    status: PlayerStatus;\n}\n\nexport interface PlayerStatus {\n    hand: Hand;\n    move: Move;\n    canDo: Action[];\n}\n\nexport type Action = 'draw' | 'stay';\nexport const actionLabel = (action: Action) => {\n    switch (action) {\n        case 'draw':\n            return 'Draw';\n        case 'stay':\n            return 'Stay';\n        default:\n            return '???';\n    }\n};\n\n\nexport type Move = 'wait' |\n    'in-game' |\n    'burst' |\n    'draw' |\n    'stay' |\n    'timeout' ;\n\nexport type RoomEventListener = (event: RoomEvent, state: AppState) => void;\n\nexport interface RoomEvent {\n    type: string;\n    round?: number;\n    room?: Room;\n    roomId?: Room;\n    winners?: Player[]\n    action?: PlayerStatus\n}\n","import {html} from 'lit-html';\nimport {when} from 'lit-html/directives/when';\nimport {repeat} from 'lit-html/directives/repeat';\n\nimport {Action, actionLabel, Hand, PlayerWithStatus} from '../models/models';\nimport {AppState} from '../models/state';\nimport {api, updateState} from './app';\n\nconst onLeave = (state: AppState) => () =>\n    api.leave(state.current.id, state.me.id)\n        .then(() => api.getRooms())\n        .then(rooms => updateState({...state, rooms, current: null}))\n        .catch(err => updateState({...state, error: err}));\n\nconst onAction = (state: AppState, action: Action) => () =>\n    api.action(state.current.id, state.me.id, action)\n        .then(current => updateState({...state, current}))\n        .catch(err => updateState({...state, error: err}));\n\nconst handTpl = (hand: Hand) =>\n    html`${repeat(hand.cards,\n        card => card,\n        card => html`\n<div class=\"card\">\n  <img src=${`https://deckofcardsapi.com/static/img/${card}.png`} alt=${card}>\n</div>`)}`;\n\nconst playerTpl = ({player, status}: PlayerWithStatus) =>\n    html`\n<div class=\"player ${status.move}\">\n    <div class=\"name\">${player.name}</div>\n    <div class=\"score\">${status.hand.score}</div>\n    <div class=\"move\">${status.move}</div>\n    <div class=\"cards\">${handTpl(status.hand)}</div>\n  </div>`;\n\nconst currentTpl = (state: AppState) => () => {\n    let current = state.current;\n    const ps = state.me && current.players.find(it => it.player.id === state.me.id);\n\n    const winner = (state.lastEvent && state.lastEvent.winners) ?\n        (state.lastEvent.winners.length ? state.lastEvent.winners.map(it => it.name).join(', ') : 'Bank') : null;\n    return html`\n<div class=\"room-current\">\n  <header>\n    <div class=\"name\">${current.name}</div>\n    <button type=\"button\" @click=${onLeave(state)}>Leave</button>\n  </header>\n  \n  ${winner ? html`<h3 class=\"winner\">${winner}</h3>` : ''}\n  \n  <div class=\"players\">\n      <!--bank-->\n      <div class=\"player bank\">\n        <div class=\"name\">Bank</div>\n        <div class=\"score\">${current.bank.score}</div>\n        <div class=\"cards\">${handTpl(current.bank)}</div>\n        <div class=\"move\"></div>\n      </div>\n        \n      <!--other players-->\n      ${repeat(current.players.filter(it => !state.me || it.player.id !== state.me.id),\n        it => it.player.id,\n        (it) => playerTpl(it))}\n      \n      <!-- me -->\n      ${ps ? html`\n      <div class=\"player me ${ps.status.move}\">\n        <div class=\"name\">${ps.player.name}</div>\n        <div class=\"score\">${ps.status.hand.score}</div>\n        <div class=\"move\">${ps.status.move}</div>\n        <div class=\"cards\">${handTpl(ps.status.hand)}</div>\n        <div class=\"actions\">\n          ${repeat(ps.status.canDo, action => action, (action) =>\n        html`<button type=\"button\" @click=${onAction(state, action)}>\n               ${actionLabel(action)}\n             </button>`)}\n        </div>\n      </div>` : ''}\n      </div>\n</div>`;\n};\n\nexport const currentTemplate = (state: AppState) =>\n    html`${when(state.current, currentTpl(state), () => html``)}`;\n","import {html, render} from 'lit-html';\nimport {when} from 'lit-html/directives/when';\n\nimport {BackendApi} from '../services/BackendApi';\nimport {AppState} from '../models/state';\nimport {loginTemplate} from './login';\nimport {RoomEvent, RoomEventListener} from '../models/models';\nimport {roomsTemplate} from './rooms';\nimport {currentTemplate} from './current';\n\nconst progress = document.querySelector<HTMLProgressElement>('body > header progress');\nlet timerId;\nconst startProgress = () => {\n    clearInterval(timerId);\n    progress.value = 0;\n    timerId = setInterval(() => progress.value += 1, 500);\n};\nconst stopProgress = () => {\n    clearInterval(timerId);\n    progress.value = 0;\n};\n\nconst onEvent: RoomEventListener = (event: RoomEvent, state: AppState) => {\n    console.debug('event', event.type);\n    switch (event.type) {\n        case 'turn-started':\n            updateState({...state, current: event.room, lastEvent: event});\n            startProgress();\n            break;\n\n        case 'turn-ended':\n            const current = event.room.players.find(it => it.player.id === state.me.id) ? event.room : null;\n            updateState({...state, current, lastEvent: event});\n            startProgress();\n            break;\n\n        case 'player-joining':\n        case 'player-leaving':\n        case 'player-action':\n            // omit last event\n            updateState({...state, current: event.room});\n            break;\n\n        case 'round-ended':\n            clearInterval(timerId);\n            updateState({...state, current: event.room, lastEvent: event});\n            stopProgress();\n            break;\n\n        default:\n            console.warn(`type: ${event.type} not supported`, event);\n    }\n};\n\nexport const api = new BackendApi('http://ilaborie.org:9898', onEvent);\nconst main = document.querySelector('main');\n\nconst errorTemplate = (state: AppState) => () =>\n    html`\n<div class=\"error\">\n  ${state.error}\n  <button class=\"button\" @click=${() => updateState({...state, error: null})}>Close</button>\n</div>`;\n\nconst bodyTemplate = (state: AppState) => {\n    if (state.me === null) {\n        return loginTemplate(state);\n    } else if (state.current) {\n        return currentTemplate(state);\n    } else {\n        return roomsTemplate(state);\n    }\n};\n\nconst mainTemplate = (state: AppState) =>\n    html`\n${when(state.error,\n        errorTemplate(state),\n        () => html`<section>${bodyTemplate(state)}</section>`)}`;\n\nexport const updateState = (state: AppState) => {\n    console.debug('updateState', state);\n    api.state = state;\n    render(mainTemplate(state), main);\n};\n","import {initialState} from './models/state';\nimport {updateState} from './templates/app';\n\ndeclare global {\n    interface Window {\n        debug: Element;\n    }\n}\n\n// Bootstrap\nupdateState(initialState);\n"]}